@page "/"
@using DataEntities
@using Store.Services
@inject ProductService ProductService
@inject IConfiguration Configuration
@inject IHttpContextAccessor HttpContextAccessor
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 10000)]

<PageTitle>Welcome to the eShop for Outdoor hobbyists! :)</PageTitle>

<div class="product">
    <!--<CatalogSearch BrandId="@BrandId" ItemTypeId="@ItemTypeId" />-->
    @if (products is null)
    {
        <p>Loading...</p>
    }
    else
    {

        for (int i = 0; i < 5; i++)
        {
            <div class="product-row">
                @for (int j = i; j < products.Count; j+=5)
                {
                    <ProductListItem product="@products[j]" />
                }
            </div>
        }

    }
</div>

@code {
    private List<Product>? products;
    private int? LastViewedProductId;
    private Product? LastViewedProduct;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        products = await ProductService.GetProducts();
    }
}
