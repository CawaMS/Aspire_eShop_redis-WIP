@page "/topvotedproducts"
@using DataEntities
@using Store.Services
@inject ProductService ProductService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]

<PageTitle>Top voted products</PageTitle>

<h1>Products</h1>

<p>Here are the top voted products</p>

<div class="product">
    @if (productRankings is null)
    {
        <p>No product rankings yet</p>
    }
    else
    {   
            <div>
                <table>
                    <tr>
                        <th></th>
                        <th></th>
                    </tr>
                @for (int i = 0; i < productRankings.Count(); i++)
                {
                    <tr>
                        <td class="card" style="width:50%">
                            <img src="images/@productRankings[i].product.ImageUrl" alt="@productRankings[i].product.Name" style="width:100%">
                            <div class="container" @key="@productRankings[i].product.Id">
                                  <b>@productRankings[i].product.Name</b>                                                                                                    
                            </div>
                        </td>
                        <td align="left">
                            <div>
                                <h1>
                                    @productRankings[i].rank
                                </h1>
                                <h4>
                                    customers liked @productRankings[i].product.Name
                                </h4>
                            </div>
                        </td>
                    </tr>
                }
                </table>

            </div>
    }
</div>

@code {
    private ProductRanking[] productRankings;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        productRankings = await ProductService.GetProductRankings();
    }

}

